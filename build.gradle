buildscript {
    ext.kotlin_version = '1.3.41'
    ext.ktor_version = '1.2.3'

    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id 'net.minecrell.plugin-yml.bukkit' version '0.3.0'
}

apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'

kotlin {
    experimental {
        coroutines "enable"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId pluginGroup
            artifactId pluginName
            version pluginVersion
            from components.java
        }
    }
}

group = pluginGroup
version = pluginVersion

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven {
        name = 'destroystokyo-repo'
        url = 'https://repo.destroystokyo.com/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'papermc'
        url = 'https://papermc.io/repo/repository/maven-public/'
    }
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

dependencies {
    compileOnly 'com.destroystokyo.paper:paper-api:1.15.2-R0.1-SNAPSHOT'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.1'
    compile "io.ktor:ktor-websockets:$ktor_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile 'org.jetbrains.exposed:exposed:0.17.1'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

bukkit {
    name = pluginName
    main = 'net.nekocraft.mcpanelbackend.Main'

    apiVersion = '1.13'

    website = 'nekocraft.net'
    author = 'Shirasawa'

    commands {
        panel {
            description = 'Panel commands.'
            usage = '/panel'
        }
    }
}

jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
